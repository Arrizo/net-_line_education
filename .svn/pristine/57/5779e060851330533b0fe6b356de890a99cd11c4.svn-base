<template>
  <div class="sort-warp">
    <mt-cell title="题目类型：" is-link v-model="popupValue" @click.native="popupVisible=true" >
</mt-cell>
    <mt-cell title="难度等级：" is-link v-model="difficValue" @click.native="difficuVisible=true" >
</mt-cell>
<div class="primary-btn">
<mt-button type="primary" size="large" @click="next()">确定</mt-button>
</div>
<!-- 题目选择 -->
    <mt-popup v-model="popupVisible" popup-transition="popup-fade" position="bottom"  style="width: 100%;" >
<mt-picker :slots="slots"  :valueKey="'name'" :show-toolbar="true" @change="selectAare">
  <slot>
    <div class="pop-btn">
      <div @click="popupVisible=false">取消</div><div @click="getValue()">确认</div>
    </div>
  </slot>
</mt-picker>
</mt-popup>
<!-- 难度选择 -->
    <mt-popup v-model="difficuVisible" popup-transition="popup-fade" position="bottom"  style="width: 100%;" >
<mt-picker :slots="difficuSlots"  :valueKey="'name'" :show-toolbar="true" @change="selectDiffic">
  <slot>
    <div class="pop-btn">
      <div @click="difficuVisible=false">取消</div><div @click="getDifficValue()">确认</div>
    </div>
  </slot>
</mt-picker>
</mt-popup>
  </div>
</template>
<script>
import {categoryTree} from '@/api'
export default {
  name: 'sort',
  data () {
    return {
      popupValue: '请选择题目类型',
      difficValue: '请选择难度等级',
      sortName: '',
      difficName: '',
      slots: [
        { // 一级   省
          flex: 1,
          values: ['请选择'],
          className: 'slot1',
          textAlign: 'center'
        }, { // 二级   市
          flex: 1,
          values: ['请选择'],
          className: 'slot1',
          textAlign: 'center'
        }, { // 三级   区
          flex: 1,
          values: ['请选择'],
          className: 'slot1',
          textAlign: 'center'
        }
      ],
      difficuSlots: [{
        values: [{name: '入门', id: 0}, {name: '初级', id: 1}, {name: '中级', id: 2}, {name: '高级', id: 3}, {name: '大师', id: 4}]
      }],
      handlder: e => { e.preventDefault() },
      popupVisible: false,
      difficuVisible: false, // 难度
      cateObj: {}
    }
  },
  created () {
    this.getCategoryTree()
  },
  watch: {
    popupVisible (newV, oldV) {
      if (newV) {
        this.openTouch()
      } else {
        this.closeTouch()
      }
    },
    difficuVisible (newV, oldV) {
      if (newV) {
        this.openTouch()
      } else {
        this.closeTouch()
      }
    }
  },

  methods: {
    selectAare (picker, values) {
      picker.setSlotValues(1, values[0].children)
      picker.setSlotValues(2, values[1].children)
      let sortObj = picker.getValues()
      this.sortName = `${sortObj[0].name}-${sortObj[1].name}-${sortObj[2].name}`
      this.categoryId = sortObj[2].id
    },
    selectDiffic (picker, values) {
      this.difficName = `${picker.getValues()[0].name}`
      this.lv = picker.getValues()[0].id
    },
    getValue () {
      this.popupValue = this.sortName
      this.cateObj.id = this.categoryId
      this.popupVisible = false
    },
    getDifficValue () {
      this.difficValue = this.difficName
      this.cateObj.lv = this.lv
      this.difficuVisible = false
    },
    openTouch () {
      let that = this
      document.getElementsByTagName('body')[0].addEventListener('touchmove', that.handlder, {passive: false})
      console.log('addEventListener')
    },
    closeTouch () {
      let that = this
      document.getElementsByTagName('body')[0].removeEventListener('touchmove', that.handlder, {passive: false})
      console.log('removeEventListener')
    },
    getCategoryTree () {
      categoryTree().then(res => {
        if (res.code === 200) {
          this.slots[0].values = res.data
        }
      })
    },
    next () {
      if (Object.keys(this.cateObj).length !== 2) {
        this.$popBox.Toast('请完善类型选择')
        return false
      } else {
        this.$router.push({name: 'Sort_Item', query: this.cateObj})
      }
    }
  }
}
</script>
<style scoped lang='scss'>
.sort-warp{
  margin-top: 100px;
  .pop-btn{
    display: flex;
    justify-content: space-around;
    height: 100%;
    div{
      font-size: 17px;
      line-height: 40px;
      &:last-child{
          color: #26a2ff;
      }
    }
  }
}
.primary-btn{
  border-top: 1px solid #dcdcdc;
  padding: 40px;
}
</style>
