<template>
<div class="exam-warp">
    <a class="time-out">时间：{{useTime}}</a>
  <div class="exam" v-show="isAwait">
    <div >
      <loading :loading-show='loading'></loading>
    </div>
     <div class="start-btn"><div class="start" @click="start">{{loadingText}}</div></div>
    </div>
    <div class="exam-field" v-show="!isAwait">
      <div class="exam-item">
<mt-field label="考生姓名:" v-model="personInfo.name" readonly></mt-field>
<!-- <mt-field label="身份证号:" v-model="username"></mt-field>
<mt-field label="单   位:" v-model="username"></mt-field> -->
<mt-field label="信封编号:" v-model="answersObj.envelopeNum" readonly></mt-field>
<mt-field label="真币张数:" v-model.number="answersObj.genuineCoinTotal" placeholder="请输入真币张数"  v-if="examType"></mt-field>

<mt-field label="假币张数" placeholder="请输入假币张数" type='number' v-model.number="answersObj.falseCoinTotal" @input="getCounter($event)"></mt-field>
<mt-field label='假币冠字号码' placeholder='请输入所有假币号码，并用“-”符号隔开' v-if="examType" v-model="answersObj.falseCoinNumber" type='textarea' :rows='rowsNum'>
  <!-- <span class="add-rows" @click="rowsNum++">+</span> -->
</mt-field>
  </div>
<!-- 广东试题 -->
    <section v-if="examType">
  <div v-for="(item,index) in optionList" :key="index" class="exam-item">
      <h1 class="money-title" @click="toggles(index)" > {{index===0?'机制币（其中一张）':'变造币（其中一张）'}}<i class="close" :class="{'open':curIndex===index}"></i></h1>
      <div  class="show" :class="{'show-item':curIndex===index}">
      <mt-field label="假币冠字号码:" placeholder="请输入冠字号码"  v-model="answersObj.answers[index].crownNumber" class="show-firt"></mt-field>

<div class="fake">
<section v-for="(option,oIndex) in item" :key="oIndex+'key'" class="clearfix">
  <mt-field :label="option.feature+'：'" v-model="option.answer" v-if="!option.opt"></mt-field>
        <mt-radio
        v-if="index===1&&option.type===2"
          :title="option.feature+'：'"
  v-model="option.answer"
  :options="option.opt.split('；')">
</mt-radio>
  </section>
</div>

</div>
  </div>
    </section>
    <!-- 江西试题 -->
    <section v-else>
  <div v-for="(item,index) in optionList" :key="index" class="exam-item">
      <h1 class="money-title" @click="toggles(index)" >假币特征（其中1张）<i class="close" :class="{'open':curIndex===index}"></i></h1>
      <div  class="show" :class="{'show-item':curIndex===index}">
      <mt-field label="假币冠字号码:" placeholder="请输入冠字号码" v-model="answersObj.answers[index].crownNumber" class="show-firt" ></mt-field>
      <mt-radio class="radiolist split no-title"
      @change="checkeds($event,index)"
  v-model="answersObj.answers[index].featureType"
  :options="[{label:'伪造币',value:'1'},{label:'变造币',value:'2'}]">
</mt-radio >
<div v-if="answersObj.answers[index].featureType==='1'" class="fake">
<section v-for="(option,oIndex) in item" :key="oIndex+'key'" class="clearfix">
          <mt-radio
          v-if="option.type===1"
          :title="option.feature+'：'"
  v-model="option.answer"
  :options="option.opt.split('；')" >
</mt-radio>
  </section>
</div>
<div v-if="answersObj.answers[index].featureType==='2'" class="fake" >
  <section v-for="(option,oIndex) in item" :key="oIndex+'key'"  class="clearfix" >
          <mt-radio
          v-if="option.type===2"
          :title="option.feature+'：'"
  v-model="option.answer"
  :options="option.opt.split('；')">
</mt-radio>
  </section>
</div>
</div>
  </div>
    </section>

  <div class="comfirm-btn">
  <mt-button type="primary" class="primary" size='large' @click="submit">交 卷</mt-button>
  </div>
    </div>
    <!-- <exam-details :ShowDetails.sync='showMask' :answerObj='answersObj.answers'>
      <h1 slot="footer" class="footer"> <mt-button type="primary" class="primary" size='large' @click="saveData" >确认交卷</mt-button></h1>
    </exam-details> -->
    </div>
</template>
<script>
import SockJs from 'sockjs-client'
import Stomp from 'stompjs'
import {timeOut} from '@/utils/common'
import {getRoomInfo, listFeature, practicalSave} from '@/api'
import {mapGetters} from 'vuex'

import {TRA_GET} from '@/config/env'
export default {
  name: 'Examination',
  data () {
    return {
      optionList: [],
      rowsNum: '4',
      featureObj: { size: 20, current: 1 },
      // showMask: false,
      useTime: '00:00:00',
      examType: '',
      curIndex: '',
      isAwait: false,
      loading: false,
      loadingText: '准备',
      optionType1: [],
      optionType2: [],
      stompClient: null,
      answersObj: {
        examLength: 0
      }
    }
  },
  computed: {
    ...mapGetters([
      'personInfo'
    ])
  },
  watch: {
    curIndex (newV, oldV) {
      console.log(newV)
      this.stompClient && this.stompClient.send(`/exam/auth/practice/${9999}/preparation`, {}, JSON.stringify(this.answersObj))
    }
  },
  created () {
    this.examType = parseInt(this.$route.query.type) === 2
    // this.initRoom()
    // this.initWebsocket()
    this.getListFeature()
    this.answersObj = Object.assign(this.answersObj, this.$route.query)
  },
  mounted () {
    this.checkNetWorkStatus()
  },
  beforeDestroy () {
    (this.disc = true) && this.stompClient && this.stompClient.disconnect()
    clearInterval(this.st)
    this.removeNetWorkStatus()
  },
  methods: {
    submit () {
      // this.showMask = true
      // if (this.examType) {
      this.answersObj.answers.forEach((opt, index) => {
        opt.answer = this.optionList[index];
        (this.examType) && (opt.featureType = index + 1)
      })
      // }
      this.$popBox.MessageBox.confirm('确定提交考试！').then(res => {
        this.saveData()
      })
      console.log(this.answersObj, '-=-=')
    },
    toggles (index) {
      this.curIndex = index === this.curIndex ? '' : index
    },
    initWebsocket () {
      let sock = new SockJs(TRA_GET)
      this.stompClient = Stomp.over(sock)
      this.stompClient.heartbeat.outgoing = 5000
      this.stompClient.heartbeat.incoming = 5000
      // socket 连接成功!
      this.stompClient.connect({}, (data) => {
      // 连接成功是返回的数据
        console.log('-=-=-=成功====！', data)
        // 房间的持续数据连接
        this.stompClient.subscribe(`/queue/auth.practice.exam.9999`, (res) => {
          // 订阅某个topic
          console.log(res, '999订阅。。。')
        })
        // 单个用户提醒
        this.stompClient.subscribe(`/auth/practice/exam/%s`, (res) => {
          // 订阅某个topic
          console.log(res, '999订阅。。。')
          this.$popBox.Toast({message: res.msg, duration: 4000})
        })
        // 集体用户提醒
        this.stompClient.subscribe(`/amq/queue/auth.practice.exam.%s`, (res) => {
          this.$popBox.Toast({message: res.msg, duration: 4000})
        })
        // 初始话房间信息
        // this.stompClient.subscribe('/auth/practice/exam/9999', (res) => {
        //   // 订阅某个topic
        //   console.log(res)
        // })
      }, (error) => {
        (!this.disc) && setTimeout(() => {
          this.initWebsocket()
        }, 2000)

        console.log('connect falt...', error)
      })
    },
    // 初始化房间信息  this.$route.query.examSessionId
    initRoom () {
      getRoomInfo({roomId: 9999 || this.$route.query.examSessionId}).then(res => {
        if (res.code === 999) {
          // 实时显示考试时间
          this.useTime = timeOut(res.seconds)
          // 判断用户是否能考试
          if (res.isStarted) {
            if (res.currUser.canProceed) {
              if (res.currUser.isOver) {
                this.$popBox.alert('您好，本次考试您已提交，请勿重复提交！').then(action => { this.$router.replace({path: '/home'}) })
              }
            } else {
              this.$popBox.alert('您好，您暂时不能参加本次考试！').then(action => { this.$router.replace({path: '/home'}) })
            }
          } else {
            this.isAwait = true
          }
        }
      })
    },
    // 获取答题卡题目
    getListFeature () {
      this.featureObj.examType = this.$route.query.examType
      listFeature(this.featureObj).then(res => {
        if (res.code === 200) {
          this.featureObj.size1 = 0
          this.featureObj.size2 = 0
          this.recordList = res.data.records
          console.log(this.optionList);
          (res.data.records).forEach(i => {
            if (i.type === 1) {
              this.optionType1.push(i)
              this.featureObj.size1++
            } else {
              this.optionType2.push(i)
              this.featureObj.size2++
            }
          })
        }
      })
    },
    getCounter ($event) {
      this.optionList = [];
      (!$event) && ($event = 0);
      (parseInt($event) > 20) && ($event = 20)
      // let length = [this.optionType1, ...this.optionType2].length
      this.answersObj.falseCoinTotal = parseInt($event)
      // 判断如果未广东类型，默认两张
      this.examType && ($event = 2)
      this.answersObj.answers = []
      for (let i = 0; i < parseInt($event); i++) {
        this.optionList.push(JSON.parse(JSON.stringify(this.recordList)))
        this.answersObj.answers[i] = {}
      }
      console.log('optionList', this.answersObj, this.optionList)
    },
    start () {
      let seft = this
      this.loading = !this.loading
      this.loadingText = this.loading ? '取消准备' : '准备'
      this.stompClient.send(`/exam/auth/practice/${9999}/preparation`, {}, seft.loading)
    },
    saveData () {
      practicalSave(this.answersObj).then(res => {
        if (res.code === 200) {
          this.showMask = false
          this.$popBox.Toast({message: '提交成功，即将跳转首页...', duration: 4000})
          setTimeout(() => {
            this.$router.replace({path: '/home'})
          }, 4000)
        }
      })
    },
    countDown () {
      this.st = setInterval(() => {
        this.answersObj.examLength++
      }, 1000)
    },
    // 监听网络的状态
    checkNetWorkStatus () {
      let that = this
      // 断网时做soket的重连
      window.addEventListener('offline', function () {
        that.$popBox.Toast({message: '您的网络已断开，正在重新连接...', duration: 2000})
      })
      window.addEventListener('online', function () {
        that.$popBox.Toast({message: '网络已连接', duration: 2000})
      })
    },
    // 移除监听网络状态
    removeNetWorkStatus () {
      window.removeEventListener('offline', function () {})
      window.removeEventListener('online', function () {})
    },
    // 选择伪币类型
    checkeds ($event, index) {
      console.log('=-=-=', this.answersObj)
      // let that = this
      this.answersObj.answers[index].featureType = $event
      // this.answersObj.answers[index].answer = []
      // this.$set(this.answersObj.answers[index], 'answer', [])
      // for (let i = 0; i < that['optionType' + $event].length; i++) {
      //   this.answersObj.answers[index].answer.push({})
      // }
      this.$forceUpdate()
    },
    outTest () {
      this.$popBox.MessageBox.alert('您不符合此场考试的权限，即将退出！').then(action => {
        this.$router.go(-1)
      })
    }
  }
}
</script>

<style lang="scss" scoped>

.exam-warp{
  height: 100%;
  .exam-field{
    .exam-item{
      border-bottom: 6px solid #ebebeb;
    }
  }
}
.exam{
  margin-top: 100px;
        display:flex;
        flex-direction: column;
        height: 100%;
        justify-content: center;
        align-items: center;
        .start-btn{
            margin-top: 200px
        }
}
        .start{
            width: 80px;
            height: 80px;
            border-radius: 50%;
            text-align: center;
            display: table-cell;
            font-size: 17px;
            color: #fff;
            vertical-align: middle;
            background-image: linear-gradient(-30deg,lightgreen,lightblue)
        }
      /deep/.all-money .mint-cell-wrapper .mint-cell-title{
        width: 100%
      }
      /deep/.all-num .mint-cell-wrapper .mint-cell-title{
        width: auto;
      }
      .money-title{
            font-size: 18px;
    text-align: center;
    margin: 8px 0px;
      }
      .show{
        transition: all .3s;
        max-height: 0px;
        overflow:hidden;
            width: 100%;
            .show-firt{
              border-bottom: 5px solid #eee;
            }
      }
      .show-item{
        max-height: 1000px
      }
      .close{
        display: inline-block;
        width: 10px;
        height: 10px;
        border-right: 1px solid gray;
        border-bottom: 1px solid gray;
        transform: rotate(-45deg);
        margin-left:168px;
        transition: all .3s;
      }
      .open{
        transform: rotate(45deg)
      }
 .time-out{
  position: fixed;
  top: 10px;
  right: 5px;
  color: #fff;
  font-size: 13px;
  z-index: 1001;
}
/deep/ .radiolist{
  display: flex;
justify-content: center;
align-items: center;
 .mint-cell{
  .mint-cell-wrapper{
    background-image: none;
  }
}
}
/deep/ .fake {
  .clearfix{
  .mint-radiolist {
  .mint-radiolist-title{
    color: #26a2ff;
    font-size: 14px;
  }
  .mint-cell{
        float: left;
    .mint-cell-wrapper{
    background-image: none;
    }
  }
  }
  .mint-cell .mint-cell-wrapper .mint-cell-title{
width: auto
    }

  }
}
.split{
  border-bottom: 1px solid #d9d9d9;
}
/deep/ .no-line{
    .mint-cell{
    .mint-cell-wrapper{
    background-image: none;
    }
  }
}
/deep/ .radil-title{
  justify-content: start;
  .mint-radiolist-title{
      color: #26a2ff;
      font-size: 15px;
  }
}
.comfirm-btn{
 margin-top: 10px;
 padding: 0px 40px;
}
.clearfix{
  border-bottom: 1px solid #eee;
}
.hidden{
  display: none;
}
.footer{
  padding: 15px 40px;
}
.add-rows{
  display: inline-block;
  height: 20px;
  width: 20px;
  border-radius: 50%;
  color: #4caf50;
  font-weight: bold;
  font-size: 20px;
  text-align: center;
  vertical-align: super;
  border:3px solid #4caf50;
}
</style>
