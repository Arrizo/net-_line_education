<template>
<div class="exam-warp">
  <div class="exam" v-if="isAwait">
    <div>
      <loading :loading-show='loading'></loading>
    </div>
     <div class="start-btn"><div class="start" @click="start">{{loadingText}}</div></div>
    </div>
    <div class="exam-field" v-else>
      <div>
<mt-field label="考生姓名:" v-model="username"></mt-field>
<mt-field label="身份证号:" v-model="username"></mt-field>
<mt-field label="单   位:" v-model="username"></mt-field>
<mt-field label="信封编号:" v-model="username"></mt-field>
  </div>
  <div>
<mt-field label="货币总张数" placeholder="请输入用户名" type='number' v-model="moneyObj.total"></mt-field>
<mt-field label="假币张数" placeholder="请输入用户名" type='number' v-model="moneyObj.counter" @input="getCounter($event)"></mt-field>
<!-- <mt-field label="请输入所有假币冠字号码:" class="all-money"></mt-field>
<mt-field :label="item+'、'" type='number' v-model="moneyObj.counterMoy[index]" class="all-num" v-for="(item,index) in moneyObj.counter" :key="index"></mt-field> -->
  </div>
  <div v-for="(item,index) in  moneyObj.counter" :key="index">
      <h1 class="money-title" @click="toggles(index)" >伪造币假币特征（其中1张）<i class="close" :class="{'open':curIndex===index}"></i></h1>
      <h1  class="show" :class="{'show-item':curIndex===index}">
      <mt-field label="假币冠字号码:" placeholder="请输入号码" type='number' v-model="moneyObj.counter"></mt-field>
      <mt-field label="假币特征：" class="all-money"></mt-field>
      <mt-checklist
  v-model="value"
  :options="['选项A', '选项B', '选项C']">
</mt-checklist>
</h1>
  </div>
    </div>
    </div>
</template>
<script>
import SockJs from 'sockjs-client'
import Stomp from 'stompjs'
let API = require('../../../../config/proxy')
export default {
  name: 'Examination',
  data () {
    return {
      username: '',
      curIndex: '',
      isAwait: false,
      value: [],
      loading: false,
      loadingText: '开始',
      moneyObj: {
        counterMoy: []
      }
    }
  },
  created () {
    // this.outTest()
    this.initWebsocket()
  },
  beforeDestroy () {
    (this.disc = true) && this.stompClien && this.stompClien.disconnect()
  },
  methods: {
    toggles (index) {
      this.curIndex = index === this.curIndex ? '' : index
    },
    initWebsocket () {
      let sock = new SockJs(API.dev.target)
      this.stompClien = Stomp.over(sock)
      console.log('=-=-=', sock, this.stompClien)
      this.stompClien.connect({}, (data) => {
      // 连接成功是返回的数据
        console.log(data)
        this.stompClien.subscribe('api/alist', (res) => {
          // 订阅某个topic
          console.log(res)
        })
      }, (error) => {
        (!this.disc) && setTimeout(() => {
          this.initWebsocket()
        }, 2000)

        console.log('connect falt...', error)
      })
    },
    getCounter ($event) {
      (!$event) && ($event = 0)
      this.moneyObj.counter = parseInt($event)
    },
    start () {
      let seft = this
      this.loading = !this.loading
      this.loadingText = this.loading ? '取消开始' : '开始'
      this.stompClien.send('api/send', {}, JSON.stringify({ready: seft.loading}))
    },
    outTest () {
      this.$popBox.MessageBox.alert('您不符合此场考试的权限，即将退出！').then(action => {
        this.$router.go(-1)
      })
    }
  }
}
</script>

<style lang="scss" scoped>
.exam-warp{
  height: 100%;
  margin-top: 40px;
  .exam-field{
    div{
      border-bottom: 10px solid #ebebeb;
    }
  }
}
.exam{
        display:flex;
        flex-direction: column;
        height: 100%;
        justify-content: center;
        align-items: center;
        .start-btn{
            margin-top: 200px
        }
}
        .start{
            width: 80px;
            height: 80px;
            border-radius: 50%;
            text-align: center;
            display: table-cell;
            font-size: 17px;
            color: #fff;
            vertical-align: middle;
            background-image: linear-gradient(-30deg,lightgreen,lightblue)
        }
      /deep/.all-money .mint-cell-wrapper .mint-cell-title{
        width: 100%
      }
      /deep/.all-num .mint-cell-wrapper .mint-cell-title{
        width: auto;
      }
      .money-title{
            font-size: 18px;
    text-align: center;
    margin: 8px 0px;
      }
      .show{
        display: inline-block;
        transition: all .3s;
        max-height: 0px;
        overflow:hidden;
            width: 100%;
      }
      .show-item{
        max-height: 200px
      }
      .close{
        display: inline-block;
        width: 10px;
        height: 10px;
        border-right: 1px solid gray;
        border-bottom: 1px solid gray;
        transform: rotate(-45deg);
        margin-left:90px;
        transition: all .3s;
      }
      .open{
        transform: rotate(45deg)
      }
</style>
